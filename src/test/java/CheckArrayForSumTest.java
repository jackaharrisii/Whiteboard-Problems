import org.junit.After;
import org.junit.Before;
import org.junit.Test;


import static org.junit.Assert.*;

public class CheckArrayForSumTest {

    CheckArrayForSum assessment = new CheckArrayForSum();

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public void find_indexes_with_nested_for_loops_Test(){
        // Given
        Integer[] nums = {2, 7, 11, 15};
        Integer target = 9;
        Integer[] expected = {0, 1};
        // When
        Integer[] actual = assessment.findIndexesWithNestedForLoops(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void find_indexes_with_nested_for_loops_Test2(){
        // Given
        Integer[] nums = {1, 2, 3, 4};
        Integer target = 6;
        Integer[] expected = {1, 3};
        // When
        Integer[] actual = assessment.findIndexesWithNestedForLoops(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void find_indexes_with_nested_for_loops_from_unsorted_array_Test(){
        // Given
        Integer[] nums = {2, 1, 4, 3};
        Integer target = 6;
        Integer[] expected = {0, 2};
        // When
        Integer[] actual = assessment.findIndexesWithNestedForLoops(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void return_null_when_value_isnt_there(){
        // Given
        Integer[] nums = {2, 1, 8, 3};
        Integer target = 6;
        Integer[] expected = null;
        // When
        Integer[] actual = assessment.findIndexesWithNestedForLoops(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void return_null_when_input_is_too_small(){
        // Given
        Integer[] nums = {2};
        Integer target = 6;
        // When
        Integer[] actual = assessment.findIndexesWithNestedForLoops(nums, target);
        // Then
        assertNull(actual);
    }

    @Test (expected = NullPointerException.class)
    public void return_NPE_when_input_array_is_null(){
        // Given
        Integer[] nums = null;
        Integer target = 6;
        Integer[] expected = {0, 2};
        // When
        Integer[] actual = assessment.findIndexesWithNestedForLoops(nums, target);
        // Then
    }

    @Test
    public void longer_array_with_nested_for_loops(){
        // Given
        Integer[] nums = {2, 1, 13, 16, 18, 19, 20, 21, 23, 24, 25, 26, 57, 28, 29, 30, 4, 3, 8, 17, 32, 9, 15, 99, 5, 46, 12, 66, 77, 88, 55, 44, 33, 22, 11, 98, 97, 14};
        Integer target = 155;
        Integer[] expected = {12, 35};
        // When
        Integer[] actual = assessment.findIndexesWithNestedForLoops(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void find_indexes_with_Hashtable_test(){
        // Given
        Integer[] nums = {2, 1, 4, 3};
        Integer target = 6;
        Integer[] expected = {0, 2};
        // When
        Integer[] actual = assessment.findIndexesWithHashTable(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void longer_array_with_Hashtable(){
        // Given
        Integer[] nums = {2, 1, 13, 16, 18, 19, 20, 21, 23, 24, 25, 26, 57, 28, 29, 30, 4, 3, 8, 17, 32, 9, 15, 99, 5, 46, 12, 66, 77, 88, 55, 44, 33, 22, 11, 98, 97, 14};
        Integer target = 155;
        Integer[] expected = {12, 35};
        // When
        Integer[] actual = assessment.findIndexesWithHashTable(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void return_null_when_value_isnt_there_using_hashtable(){
        // Given
        Integer[] nums = {2, 1, 8, 3};
        Integer target = 6;
        // When
        Integer[] actual = assessment.findIndexesWithHashTable(nums, target);
        // Then
        assertNull(actual);
    }

    @Test
    public void return_null_when_input_is_too_small_using_hashtable(){
        // Given
        Integer[] nums = {2};
        Integer target = 6;
        Integer[] expected = null;
        // When
        Integer[] actual = assessment.findIndexesWithHashTable(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test (expected = NullPointerException.class)
    public void return_NPE_when_input_array_is_null_using_hashtable(){
        // Given
        Integer[] nums = null;
        Integer target = 6;
        Integer[] expected = {0, 2};
        // When
        Integer[] actual = assessment.findIndexesWithHashTable(nums, target);
        // Then
    }

    @Test
    public void long_ass_array_with_nested_for_loops(){
        // Given
        Integer[] nums = {19699, 6492, 12679, 13961, 9974, 19684, 14811, 15677, 19797, 5948, 10825, 16211, 19986, 9425, 14105, 13823, 2770, 14160, 242, 13508, 19029, 7177, 9389, 269, 8309, 18787, 17338, 13937, 13752, 19789, 8794, 17674, 18933, 17188, 10000, 11697, 5999, 12814, 2098, 17470, 953, 1517, 1353, 6039, 19241, 17285, 13311, 8991, 11676, 1462, 5499, 13742, 18889, 14004, 16584, 419, 16746, 14649, 9611, 2907, 4688, 14043, 6978, 2745, 14770, 16031, 7820, 14157, 17145, 8139, 5065, 12877, 5674, 11523, 7399, 12230, 16320, 18738, 7168, 15716, 16934, 8152, 19079, 7166, 11538, 9819, 6689, 19420, 8023, 13917, 9531, 1291, 4836, 14521, 10672, 5297, 14732, 18587, 12119, 3397, 14492, 3101, 7358, 5224, 5379, 18700, 18594, 6556, 17514, 16124, 5743, 8283, 5884, 1267, 9499, 19323, 11265, 9136, 19458, 2084, 18672, 17669, 7572, 12837, 12841, 16085, 6658, 6725, 16206, 3813, 16829, 10182, 13070, 10894, 8534, 18415, 10599, 9353, 15144, 10510, 16, 7428, 4991, 11887, 6803, 8397, 11142, 17697, 5008, 9676, 10447, 1856, 12624, 14431, 6489, 8377, 11217, 14946, 18180, 10410, 13795, 5895, 14835, 3310, 15350, 14248, 16718, 11239, 9882, 14888, 9958, 3809, 10270, 17176, 17611, 9114, 9889, 15143, 3476, 19332, 16101, 13063, 14861, 16768, 19375, 540, 6879, 15849, 18096, 720, 9680, 19798, 14549, 17342, 11444, 2327, 9833, 1268, 12387, 12593, 12184, 7111, 7676, 17797, 3785, 19488, 16788, 16708, 14708, 16341, 14485, 14103, 18899, 7103, 4136, 14362, 470, 15727, 14662, 7349, 6419, 10721, 5075, 5308, 19317, 19552, 6722, 17376, 5508, 3123, 13606, 848, 14080, 18423, 9999, 14345, 7685, 8477, 9994, 7780, 15741, 14638, 15848, 13841, 19908, 12745, 9401, 19261, 1081, 1529, 18922, 7542, 9127, 748, 9667, 9363, 10859, 9031, 2231, 12980, 15363, 2982, 17730, 2805, 12175, 13372, 2499, 4204, 4504, 15313, 17712, 12141, 7931, 8648, 393, 12848, 3758, 19116, 9550, 8780, 9199, 19297, 16451, 11401, 10960, 17761, 18612, 9552, 5301, 18774, 13142, 17224, 19925, 15355, 19776, 8671, 18673, 10703, 9518, 14619, 11971, 11660, 13457, 15714, 14109, 19616, 19363, 2102, 3890, 14776, 9670, 4660, 11937, 10285, 15948, 3170, 11646, 2278, 2888, 1386, 4243, 19620, 19327, 6358, 3501, 16922, 13276, 5102, 14959, 18743, 295, 77, 17630, 19234, 10415, 19389, 12110, 6218, 11140, 5083, 16064, 8861, 19418, 15951, 1155, 15647, 19140, 4808, 12991, 4927, 8955, 18914, 18545, 305, 12357, 12855, 15902, 5219, 15163, 15872, 15572, 7813, 9342, 19594, 7855, 11763, 13187, 3823, 14679, 14189, 2699, 18502, 14602, 16780, 9042, 2279, 17005, 1762, 16201, 4359, 3475, 13251, 10850, 8945, 8814, 2105, 2180, 14123, 10028, 15812, 5501, 6398, 19309, 7921, 3906, 16785, 19600, 17482, 3584, 7293, 12095, 12508, 6787, 9183, 14359, 14962, 18573, 16273, 19705, 2425, 14603, 3929, 17201, 18230, 19275, 2386, 1701, 2023, 13973, 564, 14233, 14995, 1531, 2528, 15665, 4380, 652, 9834, 17965, 1696, 17580, 1388, 8952, 19174, 8768, 10365, 6755, 8985, 7468, 19553, 2126, 7653, 875, 14980, 7097, 3543, 17385, 12979, 9804, 12724, 494, 18279, 3885, 1061, 14320, 9021, 16509, 857, 6922, 6007, 2290, 2781, 5797, 19348, 19809, 3312, 13969, 16166, 8093, 3689, 19910, 10523, 2533, 1611, 15744, 12425, 15855, 8486, 12963, 8846, 9686, 1313, 13616, 4911, 3972, 6105, 14241, 8770, 15041, 5159, 7605, 16564, 18761, 8603, 1480, 537, 1806, 14440, 11636, 9524, 11290, 19623, 11377, 10505, 8833, 13356, 15591, 9545, 8455, 7339, 7586, 14127, 2679, 12939, 8574, 3571, 539, 1629, 2944, 19493, 4622, 7648, 7730, 9867, 11883, 4043, 7558, 4404, 8041, 11812, 1730, 10964, 3048, 1217, 3466, 430, 8818, 19143, 9129, 4795, 14934, 6368, 18462, 16894, 6168, 1954, 19990, 3136, 13362, 13793, 18720, 15635, 3196, 18754, 15783, 15107, 17698, 3416, 3671, 5449, 13143, 17477, 2136, 2438, 2890, 12445, 807, 12904, 19638, 14386, 15555, 8708, 16711, 9188, 14096, 4841, 15733, 4685, 19304, 9111, 1731, 3875, 16445, 1634, 10929, 5139, 17404, 12290, 15909, 6854, 1609, 17686, 2165, 11312, 6727, 3911, 11027, 11252, 9189, 5043, 16925, 16343, 15961, 3019, 5197, 13061, 12705, 2312, 11135, 12790, 12858, 6026, 1946, 6427, 16937, 13944, 30, 16817, 930, 15024, 15141, 4866, 14455, 6574, 12369, 122, 19713, 13779, 4652, 4191, 3864, 4408, 7481, 9344, 1847, 10619, 5289, 5186, 885, 3060, 13338, 6149, 109, 18325, 6469, 9390, 5847, 19537, 2125, 12168, 18332, 5220, 19115, 8979, 16977, 15220, 9132, 2064, 4759, 6985, 1368, 18492, 4603, 19330, 1315, 9493, 6530, 565, 3250, 19305, 1031, 1047, 13957, 8357, 5316, 16706, 7023, 12895, 12118, 8639, 8707, 8900, 10015, 16280, 10174, 12884, 19224, 9704, 11746, 19048, 15890, 11458, 7661, 8320, 14690, 7650, 16855, 19788, 8994, 19889, 9793, 6447, 18299, 15852, 14753, 11167, 17106, 12673, 5936, 14084, 13889, 649, 625, 17321, 12460, 8759, 3692, 8114, 4098, 8061, 11545, 3348, 15513, 673, 6384, 3868, 14636, 1213, 18560, 386, 16701, 3824, 12998, 12379, 8884, 6984, 936, 13686, 17127, 14637, 5526, 13748, 4469, 4049, 7091, 805, 8231, 149, 12524, 15030, 1718, 5799, 19890, 286, 6088, 14135, 4945, 18800, 13454, 6446, 14059, 17743, 2096, 17992, 6581, 831, 6023, 5372, 16307, 5329, 14482, 11861, 12556, 1335, 8447, 15891, 10361, 14419, 2948, 1105, 3032, 6748, 7075, 6647, 5239, 17360, 922, 8665, 19445, 19706, 16790, 975, 11121, 9296, 14213, 8997, 10789, 19712, 17657, 14711, 13265, 13281, 2254, 17801, 2446, 17494, 5272, 5486, 16409, 10401, 11893, 19443, 1470, 10184, 4817, 19070, 2456, 18638, 8484, 13204, 14047, 1355, 19371, 3456, 8034, 3936, 6464, 17664, 15318, 6367, 5320, 18867, 4944, 17396, 13528, 12583, 14629, 14302, 3450, 7654, 9193, 12355, 11126, 90, 5612, 8205, 214, 17467, 16167, 19098, 2001, 4972, 14038, 3017, 6883, 2043, 4194, 14276, 14555, 10794, 9864, 7574, 10343, 14614, 13055, 10138, 10780, 3530, 5123, 2669, 412, 19372, 14631, 8324, 428, 2095, 13581, 6004, 5074, 16756, 8661, 3656, 4511, 5174, 17589, 11389, 4018, 7140, 1098, 5472, 15678, 503, 15666, 7878, 16271, 16060, 6890, 1800, 16703, 19466, 9903, 3773, 19628, 10755, 13794, 19033, 17388, 15967, 5391, 17209, 1383, 10001, 18891, 18115, 13218, 10303, 8637, 16256, 4301, 13879, 16822, 12154, 12284, 13759, 3780, 9707, 13942, 17368, 11071, 9549, 15503, 11251, 11499, 10726, 17046, 3691, 6585, 19219, 12453, 12786, 18394, 13553, 19517, 7719, 4734, 495, 4132, 19279, 9066, 1351, 4045, 9030, 8289, 7817, 15223, 16044, 12381, 8089, 808, 9475, 15755, 15802, 15638, 15418, 6684, 12223, 4412, 15346, 6735, 4277, 6156, 9328, 6369, 10940, 12853, 15531, 1075, 7027, 16741, 2792, 14147, 5376, 3415, 6700, 8444, 7323, 7151, 15277, 4846, 17768, 13970, 7701, 18011, 12037, 11596, 8918, 4879, 16260, 8720, 51, 20001, 20002};
        Integer target = 40003;
        Integer[] expected = {1000, 1001};
        // When
        Integer[] actual = assessment.findIndexesWithNestedForLoops(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void long_ass_array_with_Hashtable(){
        // Given
        Integer[] nums = {19699, 6492, 12679, 13961, 9974, 19684, 14811, 15677, 19797, 5948, 10825, 16211, 19986, 9425, 14105, 13823, 2770, 14160, 242, 13508, 19029, 7177, 9389, 269, 8309, 18787, 17338, 13937, 13752, 19789, 8794, 17674, 18933, 17188, 10000, 11697, 5999, 12814, 2098, 17470, 953, 1517, 1353, 6039, 19241, 17285, 13311, 8991, 11676, 1462, 5499, 13742, 18889, 14004, 16584, 419, 16746, 14649, 9611, 2907, 4688, 14043, 6978, 2745, 14770, 16031, 7820, 14157, 17145, 8139, 5065, 12877, 5674, 11523, 7399, 12230, 16320, 18738, 7168, 15716, 16934, 8152, 19079, 7166, 11538, 9819, 6689, 19420, 8023, 13917, 9531, 1291, 4836, 14521, 10672, 5297, 14732, 18587, 12119, 3397, 14492, 3101, 7358, 5224, 5379, 18700, 18594, 6556, 17514, 16124, 5743, 8283, 5884, 1267, 9499, 19323, 11265, 9136, 19458, 2084, 18672, 17669, 7572, 12837, 12841, 16085, 6658, 6725, 16206, 3813, 16829, 10182, 13070, 10894, 8534, 18415, 10599, 9353, 15144, 10510, 16, 7428, 4991, 11887, 6803, 8397, 11142, 17697, 5008, 9676, 10447, 1856, 12624, 14431, 6489, 8377, 11217, 14946, 18180, 10410, 13795, 5895, 14835, 3310, 15350, 14248, 16718, 11239, 9882, 14888, 9958, 3809, 10270, 17176, 17611, 9114, 9889, 15143, 3476, 19332, 16101, 13063, 14861, 16768, 19375, 540, 6879, 15849, 18096, 720, 9680, 19798, 14549, 17342, 11444, 2327, 9833, 1268, 12387, 12593, 12184, 7111, 7676, 17797, 3785, 19488, 16788, 16708, 14708, 16341, 14485, 14103, 18899, 7103, 4136, 14362, 470, 15727, 14662, 7349, 6419, 10721, 5075, 5308, 19317, 19552, 6722, 17376, 5508, 3123, 13606, 848, 14080, 18423, 9999, 14345, 7685, 8477, 9994, 7780, 15741, 14638, 15848, 13841, 19908, 12745, 9401, 19261, 1081, 1529, 18922, 7542, 9127, 748, 9667, 9363, 10859, 9031, 2231, 12980, 15363, 2982, 17730, 2805, 12175, 13372, 2499, 4204, 4504, 15313, 17712, 12141, 7931, 8648, 393, 12848, 3758, 19116, 9550, 8780, 9199, 19297, 16451, 11401, 10960, 17761, 18612, 9552, 5301, 18774, 13142, 17224, 19925, 15355, 19776, 8671, 18673, 10703, 9518, 14619, 11971, 11660, 13457, 15714, 14109, 19616, 19363, 2102, 3890, 14776, 9670, 4660, 11937, 10285, 15948, 3170, 11646, 2278, 2888, 1386, 4243, 19620, 19327, 6358, 3501, 16922, 13276, 5102, 14959, 18743, 295, 77, 17630, 19234, 10415, 19389, 12110, 6218, 11140, 5083, 16064, 8861, 19418, 15951, 1155, 15647, 19140, 4808, 12991, 4927, 8955, 18914, 18545, 305, 12357, 12855, 15902, 5219, 15163, 15872, 15572, 7813, 9342, 19594, 7855, 11763, 13187, 3823, 14679, 14189, 2699, 18502, 14602, 16780, 9042, 2279, 17005, 1762, 16201, 4359, 3475, 13251, 10850, 8945, 8814, 2105, 2180, 14123, 10028, 15812, 5501, 6398, 19309, 7921, 3906, 16785, 19600, 17482, 3584, 7293, 12095, 12508, 6787, 9183, 14359, 14962, 18573, 16273, 19705, 2425, 14603, 3929, 17201, 18230, 19275, 2386, 1701, 2023, 13973, 564, 14233, 14995, 1531, 2528, 15665, 4380, 652, 9834, 17965, 1696, 17580, 1388, 8952, 19174, 8768, 10365, 6755, 8985, 7468, 19553, 2126, 7653, 875, 14980, 7097, 3543, 17385, 12979, 9804, 12724, 494, 18279, 3885, 1061, 14320, 9021, 16509, 857, 6922, 6007, 2290, 2781, 5797, 19348, 19809, 3312, 13969, 16166, 8093, 3689, 19910, 10523, 2533, 1611, 15744, 12425, 15855, 8486, 12963, 8846, 9686, 1313, 13616, 4911, 3972, 6105, 14241, 8770, 15041, 5159, 7605, 16564, 18761, 8603, 1480, 537, 1806, 14440, 11636, 9524, 11290, 19623, 11377, 10505, 8833, 13356, 15591, 9545, 8455, 7339, 7586, 14127, 2679, 12939, 8574, 3571, 539, 1629, 2944, 19493, 4622, 7648, 7730, 9867, 11883, 4043, 7558, 4404, 8041, 11812, 1730, 10964, 3048, 1217, 3466, 430, 8818, 19143, 9129, 4795, 14934, 6368, 18462, 16894, 6168, 1954, 19990, 3136, 13362, 13793, 18720, 15635, 3196, 18754, 15783, 15107, 17698, 3416, 3671, 5449, 13143, 17477, 2136, 2438, 2890, 12445, 807, 12904, 19638, 14386, 15555, 8708, 16711, 9188, 14096, 4841, 15733, 4685, 19304, 9111, 1731, 3875, 16445, 1634, 10929, 5139, 17404, 12290, 15909, 6854, 1609, 17686, 2165, 11312, 6727, 3911, 11027, 11252, 9189, 5043, 16925, 16343, 15961, 3019, 5197, 13061, 12705, 2312, 11135, 12790, 12858, 6026, 1946, 6427, 16937, 13944, 30, 16817, 930, 15024, 15141, 4866, 14455, 6574, 12369, 122, 19713, 13779, 4652, 4191, 3864, 4408, 7481, 9344, 1847, 10619, 5289, 5186, 885, 3060, 13338, 6149, 109, 18325, 6469, 9390, 5847, 19537, 2125, 12168, 18332, 5220, 19115, 8979, 16977, 15220, 9132, 2064, 4759, 6985, 1368, 18492, 4603, 19330, 1315, 9493, 6530, 565, 3250, 19305, 1031, 1047, 13957, 8357, 5316, 16706, 7023, 12895, 12118, 8639, 8707, 8900, 10015, 16280, 10174, 12884, 19224, 9704, 11746, 19048, 15890, 11458, 7661, 8320, 14690, 7650, 16855, 19788, 8994, 19889, 9793, 6447, 18299, 15852, 14753, 11167, 17106, 12673, 5936, 14084, 13889, 649, 625, 17321, 12460, 8759, 3692, 8114, 4098, 8061, 11545, 3348, 15513, 673, 6384, 3868, 14636, 1213, 18560, 386, 16701, 3824, 12998, 12379, 8884, 6984, 936, 13686, 17127, 14637, 5526, 13748, 4469, 4049, 7091, 805, 8231, 149, 12524, 15030, 1718, 5799, 19890, 286, 6088, 14135, 4945, 18800, 13454, 6446, 14059, 17743, 2096, 17992, 6581, 831, 6023, 5372, 16307, 5329, 14482, 11861, 12556, 1335, 8447, 15891, 10361, 14419, 2948, 1105, 3032, 6748, 7075, 6647, 5239, 17360, 922, 8665, 19445, 19706, 16790, 975, 11121, 9296, 14213, 8997, 10789, 19712, 17657, 14711, 13265, 13281, 2254, 17801, 2446, 17494, 5272, 5486, 16409, 10401, 11893, 19443, 1470, 10184, 4817, 19070, 2456, 18638, 8484, 13204, 14047, 1355, 19371, 3456, 8034, 3936, 6464, 17664, 15318, 6367, 5320, 18867, 4944, 17396, 13528, 12583, 14629, 14302, 3450, 7654, 9193, 12355, 11126, 90, 5612, 8205, 214, 17467, 16167, 19098, 2001, 4972, 14038, 3017, 6883, 2043, 4194, 14276, 14555, 10794, 9864, 7574, 10343, 14614, 13055, 10138, 10780, 3530, 5123, 2669, 412, 19372, 14631, 8324, 428, 2095, 13581, 6004, 5074, 16756, 8661, 3656, 4511, 5174, 17589, 11389, 4018, 7140, 1098, 5472, 15678, 503, 15666, 7878, 16271, 16060, 6890, 1800, 16703, 19466, 9903, 3773, 19628, 10755, 13794, 19033, 17388, 15967, 5391, 17209, 1383, 10001, 18891, 18115, 13218, 10303, 8637, 16256, 4301, 13879, 16822, 12154, 12284, 13759, 3780, 9707, 13942, 17368, 11071, 9549, 15503, 11251, 11499, 10726, 17046, 3691, 6585, 19219, 12453, 12786, 18394, 13553, 19517, 7719, 4734, 495, 4132, 19279, 9066, 1351, 4045, 9030, 8289, 7817, 15223, 16044, 12381, 8089, 808, 9475, 15755, 15802, 15638, 15418, 6684, 12223, 4412, 15346, 6735, 4277, 6156, 9328, 6369, 10940, 12853, 15531, 1075, 7027, 16741, 2792, 14147, 5376, 3415, 6700, 8444, 7323, 7151, 15277, 4846, 17768, 13970, 7701, 18011, 12037, 11596, 8918, 4879, 16260, 8720, 51, 20001, 20002};
        Integer target = 40003;
        Integer[] expected = {1000, 1001};
        // When
        Integer[] actual = assessment.findIndexesWithHashTable(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test
    public void short_array_with_single_loop(){
        // Given
        Integer[] nums = {1, 2, 3, 4};
        Integer target = 6;
        Integer[] expected = {1, 3};
        // When
        Integer[] actual = assessment.findIndexesWithSingleLoop(nums, target);
        // Then
        assertArrayEquals(expected, actual);
    }

    @Test (expected = IndexOutOfBoundsException.class)
    public void short_array_with_single_loop_fails_when_unsorted(){
        // Given
        Integer[] nums = {2, 1, 4, 3};
        Integer target = 6;
        Integer[] expected = {0, 2};
        // When
        Integer[] actual = assessment.findIndexesWithSingleLoop(nums, target);
    }

}