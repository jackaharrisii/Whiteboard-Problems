import org.junit.Test;

import java.math.BigInteger;

import static org.junit.Assert.*;

public class CompoundSumFromSubArraysTest {

    private CompoundSumFromSubArrays compoundSumFromSubArrays = new CompoundSumFromSubArrays();

    @Test
    public void test_the_basic_nested_for_loops() {
        // Given
        Integer[] test = {1, 2, 3, 4};
        Integer expected = 50;
        // When
        Integer actual = compoundSumFromSubArrays.solveWithForLoops(test);
        // Then
        assertEquals(expected, actual);
    }

    @Test
    public void test_the_basic_nested_for_loops_with_40_numbers() {
        // Given
        Integer[] test = {178, 332, 368, 185, 98, 119, 106, 385, 392, 80, 345, 462, 473, 38, 224, 439, 315, 237, 477, 21, 10, 227, 14, 352, 246, 190, 286, 328, 497, 393, 165, 324, 360, 163, 76, 97, 432, 350, 233, 220};
        Integer expected = 2962178;
        // When
        Integer actual = compoundSumFromSubArrays.solveWithForLoops(test);
        // Then
        assertEquals(expected, actual);
    }

    @Test
    public void test_the_basic_nested_for_loops_with_500_numbers() {
        // Given
        Integer[] test = {448, 208, 399, 348, 873, 571, 356, 647, 537, 479, 126, 514, 47, 164, 490, 991, 494, 225, 589, 31, 155, 485, 710, 319, 287, 107, 875, 212, 744, 415, 660, 866, 272, 968, 46, 61, 925, 384, 849, 368, 713, 653, 30, 572, 309, 502, 132, 492, 483, 648, 383, 846, 283, 74, 363, 896, 678, 300, 838, 718, 772, 25, 596, 388, 663, 605, 570, 347, 488, 202, 372, 965, 59, 503, 903, 191, 996, 937, 157, 590, 947, 496, 337, 179, 552, 518, 167, 499, 469, 88, 584, 456, 939, 853, 916, 389, 764, 865, 131, 816, 864, 980, 607, 258, 725, 284, 110, 622, 626, 927, 190, 803, 520, 799, 797, 151, 438, 683, 655, 581, 71, 476, 526, 737, 431, 861, 27, 895, 508, 466, 693, 136, 591, 443, 840, 330, 632, 960, 558, 87, 265, 888, 724, 904, 487, 120, 871, 312, 451, 981, 513, 144, 411, 900, 269, 941, 548, 380, 787, 489, 409, 814, 472, 791, 86, 999, 612, 841, 39, 969, 325, 286, 461, 771, 462, 585, 826, 695, 296, 125, 785, 89, 962, 166, 77, 374, 101, 817, 509, 954, 17, 171, 216, 407, 91, 220, 294, 938, 102, 149, 609, 414, 990, 21, 935, 96, 566, 254, 574, 766, 702, 948, 349, 781, 13, 172, 80, 66, 634, 1, 800, 586, 214, 266, 134, 58, 529, 859, 209, 652, 731, 629, 138, 717, 362, 291, 905, 658, 474, 180, 114, 275, 942, 60, 587, 676, 24, 121, 53, 870, 936, 193, 318, 770, 458, 63, 355, 931, 697, 346, 326, 423, 735, 751, 554, 681, 739, 281, 247, 519, 860, 268, 54, 289, 877, 834, 344, 842, 353, 259, 97, 127, 73, 553, 575, 224, 618, 798, 199, 593, 333, 550, 135, 8, 293, 217, 240, 211, 5, 560, 891, 373, 241, 261, 907, 534, 145, 878, 412, 364, 831, 83, 398, 481, 235, 324, 176, 222, 421, 789, 282, 510, 402, 332, 923, 369, 246, 437, 828, 768, 872, 192, 893, 473, 343, 93, 833, 899, 844, 776, 256, 512, 230, 105, 639, 194, 582, 750, 22, 231, 832, 201, 914, 777, 386, 926, 65, 820, 638, 471, 41, 11, 994, 594, 561, 223, 784, 544, 410, 44, 753, 42, 517, 597, 19, 221, 606, 974, 215, 869, 555, 839, 536, 78, 704, 273, 204, 297, 821, 440, 119, 712, 978, 677, 45, 576, 430, 106, 236, 441, 760, 255, 470, 434, 728, 70, 631, 979, 335, 232, 946, 887, 310, 455, 521, 507, 541, 64, 270, 807, 252, 445, 856, 392, 709, 460, 317, 989, 239, 703, 321, 721, 525, 971, 113, 604, 248, 422, 559, 354, 449, 759, 341, 205, 623, 732, 210, 482, 227, 884, 376, 432, 617, 397, 345, 524, 1000, 644, 85, 568, 852, 16, 736, 401, 762, 290, 253, 867, 531, 880, 966, 175, 435, 690, 377, 196, 621, 752, 640, 340, 837, 274, 806, 393, 748, 35, 825, 522, 229, 716, 139, 33, 538, 168, 36, 917, 439, 580, 734, 868};
        Integer expected = 1519584134;
        // When
        Integer actual = compoundSumFromSubArrays.solveWithForLoops(test);
        // Then
        assertEquals(expected, actual);
    }

    @Test
    public void basic_nested_for_loops_fails_with_1000_numbers() {
        // Given
        Integer[] test = {880, 4494, 2511, 6463, 7937, 484, 3734, 5674, 2856, 7974, 2270, 202, 8088, 1284, 886, 3584, 5396, 3331, 4570, 9691, 3358, 5805, 3288, 3773, 2174, 5573, 6122, 8527, 8414, 6688, 8316, 4665, 3748, 103, 8092, 9989, 6660, 1893, 4955, 3931, 9647, 4620, 4662, 1557, 1130, 5070, 6237, 6591, 4067, 4433, 2385, 3916, 4849, 7022, 548, 204, 2726, 7692, 4410, 9894, 5191, 9264, 1447, 288, 5226, 1982, 1955, 2478, 9393, 9037, 780, 8867, 3612, 1600, 3344, 7095, 7445, 9189, 6637, 3660, 1279, 7145, 6408, 8096, 9985, 8094, 7282, 8065, 8302, 3935, 6142, 1060, 5906, 4210, 4370, 7323, 7112, 138, 1764, 709, 2416, 6965, 8761, 1011, 8951, 201, 3577, 9151, 82, 4224, 6640, 2437, 1994, 3871, 8688, 600, 2309, 1131, 9304, 3687, 67, 9404, 3921, 2796, 644, 7650, 9911, 8448, 892, 5613, 3649, 8707, 687, 784, 5818, 9316, 1427, 8604, 5176, 8474, 8058, 5360, 7855, 9321, 198, 4289, 1071, 5007, 8880, 427, 4033, 500, 2271, 572, 3809, 3329, 4595, 8338, 730, 1705, 7463, 8899, 4549, 1004, 8672, 9791, 9150, 6743, 9543, 5037, 8905, 7429, 8509, 3229, 6110, 2079, 3753, 807, 6741, 9415, 5286, 3856, 4339, 8927, 5698, 9180, 4983, 5790, 260, 4689, 1189, 1629, 4739, 2077, 7636, 1173, 3549, 5689, 8453, 5293, 5921, 8394, 6694, 9116, 894, 2817, 4862, 7657, 2893, 6802, 8086, 4649, 6828, 5505, 7670, 2599, 6617, 5941, 3560, 7549, 1104, 3315, 3702, 3317, 8012, 1092, 1661, 4563, 9262, 5564, 9421, 8087, 5223, 4845, 3812, 4351, 1912, 6952, 8432, 7715, 4813, 840, 8980, 4014, 3274, 2153, 7385, 3580, 1203, 2890, 7512, 8692, 1560, 2617, 532, 7280, 8337, 4095, 4681, 1936, 2781, 3215, 12, 53, 1170, 6573, 1720, 884, 2208, 9130, 8769, 7788, 2246, 3832, 9796, 4196, 3125, 5511, 2117, 1344, 4850, 4226, 4557, 6718, 1302, 3786, 7071, 8355, 9910, 1043, 846, 8969, 437, 7422, 8780, 1371, 1544, 3970, 4331, 8105, 588, 9229, 3141, 3677, 8136, 7770, 6225, 4679, 6507, 9961, 7324, 8038, 8805, 9098, 8500, 4111, 665, 9834, 3021, 4925, 2324, 8450, 7571, 4672, 6810, 7881, 3010, 9697, 1812, 9808, 3074, 1270, 3369, 3575, 4998, 3443, 5978, 2062, 5135, 258, 9176, 4775, 3890, 3202, 8089, 3200, 567, 6291, 7909, 4951, 346, 5804, 66, 3822, 1534, 3241, 93, 9136, 8356, 9303, 5249, 535, 3360, 1065, 6353, 3676, 8327, 3772, 1494, 1467, 8174, 2607, 7841, 606, 4522, 2069, 8253, 9782, 3353, 9357, 48, 4732, 9914, 1138, 2818, 7052, 3205, 25, 4774, 545, 573, 9300, 6599, 6044, 597, 2125, 5216, 4001, 3679, 9137, 7254, 3908, 4128, 3410, 8657, 8259, 799, 3566, 1424, 5741, 7907, 3376, 3370, 2018, 7936, 8494, 9227, 558, 510, 3744, 4258, 7262, 2528, 9090, 9163, 3587, 9006, 7346, 7804, 2283, 1918, 8920, 4578, 5330, 1438, 1624, 6013, 9745, 2263, 2696, 7080, 1790, 9655, 3996, 300, 2884, 1358, 6393, 6626, 208, 3413, 490, 8902, 8644, 1828, 3793, 8640, 6227, 2618, 7820, 8296, 7380, 2096, 9541, 62, 7917, 5520, 3920, 4504, 8995, 5124, 1367, 5929, 1872, 4699, 8614, 8402, 8282, 9915, 5664, 5055, 8320, 2661, 9747, 3865, 6019, 9387, 4457, 8952, 2907, 7701, 1721, 8275, 2159, 1070, 6186, 2933, 2149, 4946, 7690, 9847, 5032, 9085, 1564, 1464, 9409, 122, 8183, 1308, 8348, 5958, 9368, 9553, 9614, 9064, 5162, 7213, 1506, 8405, 845, 9160, 442, 5530, 7390, 1810, 4486, 2262, 5049, 4764, 5259, 8385, 5060, 1188, 9132, 5261, 3328, 9562, 2838, 3143, 5845, 1251, 3553, 3469, 2523, 4907, 5118, 7731, 9779, 5745, 2493, 971, 3990, 1614, 517, 9283, 1167, 3419, 8361, 931, 4076, 8722, 4791, 5784, 1915, 5262, 6942, 3885, 7577, 6116, 8904, 3879, 8588, 4163, 5947, 7703, 6999, 2237, 9762, 2744, 4086, 4945, 9, 4509, 6276, 2993, 7115, 6349, 1429, 2524, 9501, 5752, 5840, 752, 3656, 4794, 2301, 9394, 9537, 6236, 9184, 1724, 3210, 8693, 255, 8044, 932, 6415, 7073, 3644, 6662, 6766, 2233, 7726, 8152, 1124, 5218, 5532, 804, 4539, 1968, 544, 15, 1583, 8109, 9584, 9921, 968, 1271, 9611, 879, 6556, 8726, 8423, 9235, 5068, 2655, 8015, 3971, 8932, 6375, 2515, 5443, 3012, 2799, 9036, 3542, 3880, 3239, 9450, 8882, 5655, 1378, 3107, 7759, 1602, 3336, 1735, 7388, 7678, 887, 2108, 6377, 4131, 5721, 2751, 7795, 7915, 3653, 2323, 4230, 4789, 6259, 312, 3025, 3264, 9201, 1380, 5240, 2882, 2401, 3449, 2735, 8568, 8673, 1820, 6294, 9165, 438, 3600, 5591, 6800, 8132, 9410, 8163, 8426, 8499, 2261, 5945, 9452, 5649, 9149, 426, 5780, 3437, 998, 8714, 1570, 9804, 5421, 9893, 8696, 2146, 4546, 4257, 7535, 758, 5311, 8235, 2345, 3101, 6255, 5685, 2800, 2600, 104, 8073, 4455, 1776, 1015, 14, 9422, 6321, 9141, 4965, 5746, 4602, 351, 8368, 2109, 8081, 1349, 4414, 6141, 4864, 5919, 4973, 5398, 1431, 8434, 5651, 9648, 7680, 3724, 8547, 5814, 2113, 7596, 6860, 6971, 7725, 5166, 9388, 5827, 4177, 3348, 7185, 156, 5540, 8530, 7516, 170, 3220, 7586, 1389, 5597, 3168, 4519, 4088, 1390, 874, 2163, 5841, 951, 8447, 9568, 9845, 4590, 483, 7037, 4408, 747, 5043, 9380, 1923, 9194, 5215, 9967, 9519, 8190, 6722, 8991, 6171, 8592, 8392, 748, 7522, 3622, 5856, 7880, 6724, 261, 1878, 8542, 2561, 9334, 8539, 9209, 6979, 4854, 1301, 1897, 9493, 2311, 917, 1088, 1964, 2366, 277, 8554, 5638, 2592, 7140, 645, 7976, 3196, 375, 7030, 9478, 7964, 6247, 9134, 5452, 8565, 7321, 1550, 6497, 6728, 4036, 3850, 7459, 6293, 8925, 1975, 5116, 3110, 2206, 903, 3693, 3121, 4947, 2431, 9433, 1442, 2256, 3743, 3165, 5275, 3764, 4962, 9666, 2433, 966, 8403, 5676, 2304, 5953, 1139, 1826, 4863, 5348, 8445, 6198, 9682, 5030, 7062, 7267, 5687, 8658, 4517, 673, 2482, 4385, 3739, 2215, 9047, 7446, 224, 6807, 3747, 4003, 4607, 6444, 7315, 89, 5994, 1772, 9971, 3272, 3447, 8387, 3820, 5147, 6209, 7706, 1954, 4096, 3962, 406, 7305, 5401, 4634, 395, 6958, 2716, 7153, 7294, 1529, 6215, 8908, 707, 8274, 5541, 6565, 257, 6646, 5313, 3159, 6228, 20, 5091, 9214, 5407, 460, 5539, 1140, 7854, 7284, 6249, 4834, 8041, 7454, 5480, 5219, 4594, 9589, 8383, 9507, 8339, 8833, 2577, 4074, 2757, 6859, 1922, 3183, 8486, 1877, 6083, 916, 4247, 2785, 1063, 8141, 8292, 7973, 8885, 1175, 8288, 2380, 4705, 9427, 9366, 6822, 6012, 291, 4323, 4828, 2035, 821, 6536, 4516, 418, 8514, 7526, 7345, 2182, 5222, 7006, 7200, 9155};
        Integer expected = Integer.MAX_VALUE;
        // When
        Integer actual = compoundSumFromSubArrays.solveWithForLoops(test);
        // Then
        assertTrue(actual < 0);  // stored as a negative number when integer overflows
    }

    @Test
    public void test_with_math() {
        // Given
        Integer[] test = {1, 2, 3, 4};
        Integer expected = 50;
        // When
        Integer actual = compoundSumFromSubArrays.solveWithMath(test);
        // Then
        assertEquals(expected, actual);
    }

    @Test
    public void test_with_math_with_40_numbers() {
        // Given
        Integer[] test = {178, 332, 368, 185, 98, 119, 106, 385, 392, 80, 345, 462, 473, 38, 224, 439, 315, 237, 477, 21, 10, 227, 14, 352, 246, 190, 286, 328, 497, 393, 165, 324, 360, 163, 76, 97, 432, 350, 233, 220};
        Integer expected = 2962178;
        // When
        Integer actual = compoundSumFromSubArrays.solveWithMath(test);
        // Then
        assertEquals(expected, actual);
    }

    @Test
    public void test_with_math_with_500_numbers() {
        // Given
        Integer[] test = {448, 208, 399, 348, 873, 571, 356, 647, 537, 479, 126, 514, 47, 164, 490, 991, 494, 225, 589, 31, 155, 485, 710, 319, 287, 107, 875, 212, 744, 415, 660, 866, 272, 968, 46, 61, 925, 384, 849, 368, 713, 653, 30, 572, 309, 502, 132, 492, 483, 648, 383, 846, 283, 74, 363, 896, 678, 300, 838, 718, 772, 25, 596, 388, 663, 605, 570, 347, 488, 202, 372, 965, 59, 503, 903, 191, 996, 937, 157, 590, 947, 496, 337, 179, 552, 518, 167, 499, 469, 88, 584, 456, 939, 853, 916, 389, 764, 865, 131, 816, 864, 980, 607, 258, 725, 284, 110, 622, 626, 927, 190, 803, 520, 799, 797, 151, 438, 683, 655, 581, 71, 476, 526, 737, 431, 861, 27, 895, 508, 466, 693, 136, 591, 443, 840, 330, 632, 960, 558, 87, 265, 888, 724, 904, 487, 120, 871, 312, 451, 981, 513, 144, 411, 900, 269, 941, 548, 380, 787, 489, 409, 814, 472, 791, 86, 999, 612, 841, 39, 969, 325, 286, 461, 771, 462, 585, 826, 695, 296, 125, 785, 89, 962, 166, 77, 374, 101, 817, 509, 954, 17, 171, 216, 407, 91, 220, 294, 938, 102, 149, 609, 414, 990, 21, 935, 96, 566, 254, 574, 766, 702, 948, 349, 781, 13, 172, 80, 66, 634, 1, 800, 586, 214, 266, 134, 58, 529, 859, 209, 652, 731, 629, 138, 717, 362, 291, 905, 658, 474, 180, 114, 275, 942, 60, 587, 676, 24, 121, 53, 870, 936, 193, 318, 770, 458, 63, 355, 931, 697, 346, 326, 423, 735, 751, 554, 681, 739, 281, 247, 519, 860, 268, 54, 289, 877, 834, 344, 842, 353, 259, 97, 127, 73, 553, 575, 224, 618, 798, 199, 593, 333, 550, 135, 8, 293, 217, 240, 211, 5, 560, 891, 373, 241, 261, 907, 534, 145, 878, 412, 364, 831, 83, 398, 481, 235, 324, 176, 222, 421, 789, 282, 510, 402, 332, 923, 369, 246, 437, 828, 768, 872, 192, 893, 473, 343, 93, 833, 899, 844, 776, 256, 512, 230, 105, 639, 194, 582, 750, 22, 231, 832, 201, 914, 777, 386, 926, 65, 820, 638, 471, 41, 11, 994, 594, 561, 223, 784, 544, 410, 44, 753, 42, 517, 597, 19, 221, 606, 974, 215, 869, 555, 839, 536, 78, 704, 273, 204, 297, 821, 440, 119, 712, 978, 677, 45, 576, 430, 106, 236, 441, 760, 255, 470, 434, 728, 70, 631, 979, 335, 232, 946, 887, 310, 455, 521, 507, 541, 64, 270, 807, 252, 445, 856, 392, 709, 460, 317, 989, 239, 703, 321, 721, 525, 971, 113, 604, 248, 422, 559, 354, 449, 759, 341, 205, 623, 732, 210, 482, 227, 884, 376, 432, 617, 397, 345, 524, 1000, 644, 85, 568, 852, 16, 736, 401, 762, 290, 253, 867, 531, 880, 966, 175, 435, 690, 377, 196, 621, 752, 640, 340, 837, 274, 806, 393, 748, 35, 825, 522, 229, 716, 139, 33, 538, 168, 36, 917, 439, 580, 734, 868};
        Integer expected = 1519584134;
        // When
        Integer actual = compoundSumFromSubArrays.solveWithMath(test);
        // Then
        assertEquals(expected, actual);
    }

    @Test
    public void integers_fail_with_1000_numbers() {
        // Given
        Integer[] test = {880, 4494, 2511, 6463, 7937, 484, 3734, 5674, 2856, 7974, 2270, 202, 8088, 1284, 886, 3584, 5396, 3331, 4570, 9691, 3358, 5805, 3288, 3773, 2174, 5573, 6122, 8527, 8414, 6688, 8316, 4665, 3748, 103, 8092, 9989, 6660, 1893, 4955, 3931, 9647, 4620, 4662, 1557, 1130, 5070, 6237, 6591, 4067, 4433, 2385, 3916, 4849, 7022, 548, 204, 2726, 7692, 4410, 9894, 5191, 9264, 1447, 288, 5226, 1982, 1955, 2478, 9393, 9037, 780, 8867, 3612, 1600, 3344, 7095, 7445, 9189, 6637, 3660, 1279, 7145, 6408, 8096, 9985, 8094, 7282, 8065, 8302, 3935, 6142, 1060, 5906, 4210, 4370, 7323, 7112, 138, 1764, 709, 2416, 6965, 8761, 1011, 8951, 201, 3577, 9151, 82, 4224, 6640, 2437, 1994, 3871, 8688, 600, 2309, 1131, 9304, 3687, 67, 9404, 3921, 2796, 644, 7650, 9911, 8448, 892, 5613, 3649, 8707, 687, 784, 5818, 9316, 1427, 8604, 5176, 8474, 8058, 5360, 7855, 9321, 198, 4289, 1071, 5007, 8880, 427, 4033, 500, 2271, 572, 3809, 3329, 4595, 8338, 730, 1705, 7463, 8899, 4549, 1004, 8672, 9791, 9150, 6743, 9543, 5037, 8905, 7429, 8509, 3229, 6110, 2079, 3753, 807, 6741, 9415, 5286, 3856, 4339, 8927, 5698, 9180, 4983, 5790, 260, 4689, 1189, 1629, 4739, 2077, 7636, 1173, 3549, 5689, 8453, 5293, 5921, 8394, 6694, 9116, 894, 2817, 4862, 7657, 2893, 6802, 8086, 4649, 6828, 5505, 7670, 2599, 6617, 5941, 3560, 7549, 1104, 3315, 3702, 3317, 8012, 1092, 1661, 4563, 9262, 5564, 9421, 8087, 5223, 4845, 3812, 4351, 1912, 6952, 8432, 7715, 4813, 840, 8980, 4014, 3274, 2153, 7385, 3580, 1203, 2890, 7512, 8692, 1560, 2617, 532, 7280, 8337, 4095, 4681, 1936, 2781, 3215, 12, 53, 1170, 6573, 1720, 884, 2208, 9130, 8769, 7788, 2246, 3832, 9796, 4196, 3125, 5511, 2117, 1344, 4850, 4226, 4557, 6718, 1302, 3786, 7071, 8355, 9910, 1043, 846, 8969, 437, 7422, 8780, 1371, 1544, 3970, 4331, 8105, 588, 9229, 3141, 3677, 8136, 7770, 6225, 4679, 6507, 9961, 7324, 8038, 8805, 9098, 8500, 4111, 665, 9834, 3021, 4925, 2324, 8450, 7571, 4672, 6810, 7881, 3010, 9697, 1812, 9808, 3074, 1270, 3369, 3575, 4998, 3443, 5978, 2062, 5135, 258, 9176, 4775, 3890, 3202, 8089, 3200, 567, 6291, 7909, 4951, 346, 5804, 66, 3822, 1534, 3241, 93, 9136, 8356, 9303, 5249, 535, 3360, 1065, 6353, 3676, 8327, 3772, 1494, 1467, 8174, 2607, 7841, 606, 4522, 2069, 8253, 9782, 3353, 9357, 48, 4732, 9914, 1138, 2818, 7052, 3205, 25, 4774, 545, 573, 9300, 6599, 6044, 597, 2125, 5216, 4001, 3679, 9137, 7254, 3908, 4128, 3410, 8657, 8259, 799, 3566, 1424, 5741, 7907, 3376, 3370, 2018, 7936, 8494, 9227, 558, 510, 3744, 4258, 7262, 2528, 9090, 9163, 3587, 9006, 7346, 7804, 2283, 1918, 8920, 4578, 5330, 1438, 1624, 6013, 9745, 2263, 2696, 7080, 1790, 9655, 3996, 300, 2884, 1358, 6393, 6626, 208, 3413, 490, 8902, 8644, 1828, 3793, 8640, 6227, 2618, 7820, 8296, 7380, 2096, 9541, 62, 7917, 5520, 3920, 4504, 8995, 5124, 1367, 5929, 1872, 4699, 8614, 8402, 8282, 9915, 5664, 5055, 8320, 2661, 9747, 3865, 6019, 9387, 4457, 8952, 2907, 7701, 1721, 8275, 2159, 1070, 6186, 2933, 2149, 4946, 7690, 9847, 5032, 9085, 1564, 1464, 9409, 122, 8183, 1308, 8348, 5958, 9368, 9553, 9614, 9064, 5162, 7213, 1506, 8405, 845, 9160, 442, 5530, 7390, 1810, 4486, 2262, 5049, 4764, 5259, 8385, 5060, 1188, 9132, 5261, 3328, 9562, 2838, 3143, 5845, 1251, 3553, 3469, 2523, 4907, 5118, 7731, 9779, 5745, 2493, 971, 3990, 1614, 517, 9283, 1167, 3419, 8361, 931, 4076, 8722, 4791, 5784, 1915, 5262, 6942, 3885, 7577, 6116, 8904, 3879, 8588, 4163, 5947, 7703, 6999, 2237, 9762, 2744, 4086, 4945, 9, 4509, 6276, 2993, 7115, 6349, 1429, 2524, 9501, 5752, 5840, 752, 3656, 4794, 2301, 9394, 9537, 6236, 9184, 1724, 3210, 8693, 255, 8044, 932, 6415, 7073, 3644, 6662, 6766, 2233, 7726, 8152, 1124, 5218, 5532, 804, 4539, 1968, 544, 15, 1583, 8109, 9584, 9921, 968, 1271, 9611, 879, 6556, 8726, 8423, 9235, 5068, 2655, 8015, 3971, 8932, 6375, 2515, 5443, 3012, 2799, 9036, 3542, 3880, 3239, 9450, 8882, 5655, 1378, 3107, 7759, 1602, 3336, 1735, 7388, 7678, 887, 2108, 6377, 4131, 5721, 2751, 7795, 7915, 3653, 2323, 4230, 4789, 6259, 312, 3025, 3264, 9201, 1380, 5240, 2882, 2401, 3449, 2735, 8568, 8673, 1820, 6294, 9165, 438, 3600, 5591, 6800, 8132, 9410, 8163, 8426, 8499, 2261, 5945, 9452, 5649, 9149, 426, 5780, 3437, 998, 8714, 1570, 9804, 5421, 9893, 8696, 2146, 4546, 4257, 7535, 758, 5311, 8235, 2345, 3101, 6255, 5685, 2800, 2600, 104, 8073, 4455, 1776, 1015, 14, 9422, 6321, 9141, 4965, 5746, 4602, 351, 8368, 2109, 8081, 1349, 4414, 6141, 4864, 5919, 4973, 5398, 1431, 8434, 5651, 9648, 7680, 3724, 8547, 5814, 2113, 7596, 6860, 6971, 7725, 5166, 9388, 5827, 4177, 3348, 7185, 156, 5540, 8530, 7516, 170, 3220, 7586, 1389, 5597, 3168, 4519, 4088, 1390, 874, 2163, 5841, 951, 8447, 9568, 9845, 4590, 483, 7037, 4408, 747, 5043, 9380, 1923, 9194, 5215, 9967, 9519, 8190, 6722, 8991, 6171, 8592, 8392, 748, 7522, 3622, 5856, 7880, 6724, 261, 1878, 8542, 2561, 9334, 8539, 9209, 6979, 4854, 1301, 1897, 9493, 2311, 917, 1088, 1964, 2366, 277, 8554, 5638, 2592, 7140, 645, 7976, 3196, 375, 7030, 9478, 7964, 6247, 9134, 5452, 8565, 7321, 1550, 6497, 6728, 4036, 3850, 7459, 6293, 8925, 1975, 5116, 3110, 2206, 903, 3693, 3121, 4947, 2431, 9433, 1442, 2256, 3743, 3165, 5275, 3764, 4962, 9666, 2433, 966, 8403, 5676, 2304, 5953, 1139, 1826, 4863, 5348, 8445, 6198, 9682, 5030, 7062, 7267, 5687, 8658, 4517, 673, 2482, 4385, 3739, 2215, 9047, 7446, 224, 6807, 3747, 4003, 4607, 6444, 7315, 89, 5994, 1772, 9971, 3272, 3447, 8387, 3820, 5147, 6209, 7706, 1954, 4096, 3962, 406, 7305, 5401, 4634, 395, 6958, 2716, 7153, 7294, 1529, 6215, 8908, 707, 8274, 5541, 6565, 257, 6646, 5313, 3159, 6228, 20, 5091, 9214, 5407, 460, 5539, 1140, 7854, 7284, 6249, 4834, 8041, 7454, 5480, 5219, 4594, 9589, 8383, 9507, 8339, 8833, 2577, 4074, 2757, 6859, 1922, 3183, 8486, 1877, 6083, 916, 4247, 2785, 1063, 8141, 8292, 7973, 8885, 1175, 8288, 2380, 4705, 9427, 9366, 6822, 6012, 291, 4323, 4828, 2035, 821, 6536, 4516, 418, 8514, 7526, 7345, 2182, 5222, 7006, 7200, 9155};
        Integer expected = Integer.MAX_VALUE;
        // When
        Integer actual = compoundSumFromSubArrays.solveWithMath(test);
        // Then
        assertTrue(actual < 0);  // stored as a negative number when integer overflows
    }

    @Test
    public void Long_works_with_1000_numbers() {
        // Given
        Integer[] test = {880, 4494, 2511, 6463, 7937, 484, 3734, 5674, 2856, 7974, 2270, 202, 8088, 1284, 886, 3584, 5396, 3331, 4570, 9691, 3358, 5805, 3288, 3773, 2174, 5573, 6122, 8527, 8414, 6688, 8316, 4665, 3748, 103, 8092, 9989, 6660, 1893, 4955, 3931, 9647, 4620, 4662, 1557, 1130, 5070, 6237, 6591, 4067, 4433, 2385, 3916, 4849, 7022, 548, 204, 2726, 7692, 4410, 9894, 5191, 9264, 1447, 288, 5226, 1982, 1955, 2478, 9393, 9037, 780, 8867, 3612, 1600, 3344, 7095, 7445, 9189, 6637, 3660, 1279, 7145, 6408, 8096, 9985, 8094, 7282, 8065, 8302, 3935, 6142, 1060, 5906, 4210, 4370, 7323, 7112, 138, 1764, 709, 2416, 6965, 8761, 1011, 8951, 201, 3577, 9151, 82, 4224, 6640, 2437, 1994, 3871, 8688, 600, 2309, 1131, 9304, 3687, 67, 9404, 3921, 2796, 644, 7650, 9911, 8448, 892, 5613, 3649, 8707, 687, 784, 5818, 9316, 1427, 8604, 5176, 8474, 8058, 5360, 7855, 9321, 198, 4289, 1071, 5007, 8880, 427, 4033, 500, 2271, 572, 3809, 3329, 4595, 8338, 730, 1705, 7463, 8899, 4549, 1004, 8672, 9791, 9150, 6743, 9543, 5037, 8905, 7429, 8509, 3229, 6110, 2079, 3753, 807, 6741, 9415, 5286, 3856, 4339, 8927, 5698, 9180, 4983, 5790, 260, 4689, 1189, 1629, 4739, 2077, 7636, 1173, 3549, 5689, 8453, 5293, 5921, 8394, 6694, 9116, 894, 2817, 4862, 7657, 2893, 6802, 8086, 4649, 6828, 5505, 7670, 2599, 6617, 5941, 3560, 7549, 1104, 3315, 3702, 3317, 8012, 1092, 1661, 4563, 9262, 5564, 9421, 8087, 5223, 4845, 3812, 4351, 1912, 6952, 8432, 7715, 4813, 840, 8980, 4014, 3274, 2153, 7385, 3580, 1203, 2890, 7512, 8692, 1560, 2617, 532, 7280, 8337, 4095, 4681, 1936, 2781, 3215, 12, 53, 1170, 6573, 1720, 884, 2208, 9130, 8769, 7788, 2246, 3832, 9796, 4196, 3125, 5511, 2117, 1344, 4850, 4226, 4557, 6718, 1302, 3786, 7071, 8355, 9910, 1043, 846, 8969, 437, 7422, 8780, 1371, 1544, 3970, 4331, 8105, 588, 9229, 3141, 3677, 8136, 7770, 6225, 4679, 6507, 9961, 7324, 8038, 8805, 9098, 8500, 4111, 665, 9834, 3021, 4925, 2324, 8450, 7571, 4672, 6810, 7881, 3010, 9697, 1812, 9808, 3074, 1270, 3369, 3575, 4998, 3443, 5978, 2062, 5135, 258, 9176, 4775, 3890, 3202, 8089, 3200, 567, 6291, 7909, 4951, 346, 5804, 66, 3822, 1534, 3241, 93, 9136, 8356, 9303, 5249, 535, 3360, 1065, 6353, 3676, 8327, 3772, 1494, 1467, 8174, 2607, 7841, 606, 4522, 2069, 8253, 9782, 3353, 9357, 48, 4732, 9914, 1138, 2818, 7052, 3205, 25, 4774, 545, 573, 9300, 6599, 6044, 597, 2125, 5216, 4001, 3679, 9137, 7254, 3908, 4128, 3410, 8657, 8259, 799, 3566, 1424, 5741, 7907, 3376, 3370, 2018, 7936, 8494, 9227, 558, 510, 3744, 4258, 7262, 2528, 9090, 9163, 3587, 9006, 7346, 7804, 2283, 1918, 8920, 4578, 5330, 1438, 1624, 6013, 9745, 2263, 2696, 7080, 1790, 9655, 3996, 300, 2884, 1358, 6393, 6626, 208, 3413, 490, 8902, 8644, 1828, 3793, 8640, 6227, 2618, 7820, 8296, 7380, 2096, 9541, 62, 7917, 5520, 3920, 4504, 8995, 5124, 1367, 5929, 1872, 4699, 8614, 8402, 8282, 9915, 5664, 5055, 8320, 2661, 9747, 3865, 6019, 9387, 4457, 8952, 2907, 7701, 1721, 8275, 2159, 1070, 6186, 2933, 2149, 4946, 7690, 9847, 5032, 9085, 1564, 1464, 9409, 122, 8183, 1308, 8348, 5958, 9368, 9553, 9614, 9064, 5162, 7213, 1506, 8405, 845, 9160, 442, 5530, 7390, 1810, 4486, 2262, 5049, 4764, 5259, 8385, 5060, 1188, 9132, 5261, 3328, 9562, 2838, 3143, 5845, 1251, 3553, 3469, 2523, 4907, 5118, 7731, 9779, 5745, 2493, 971, 3990, 1614, 517, 9283, 1167, 3419, 8361, 931, 4076, 8722, 4791, 5784, 1915, 5262, 6942, 3885, 7577, 6116, 8904, 3879, 8588, 4163, 5947, 7703, 6999, 2237, 9762, 2744, 4086, 4945, 9, 4509, 6276, 2993, 7115, 6349, 1429, 2524, 9501, 5752, 5840, 752, 3656, 4794, 2301, 9394, 9537, 6236, 9184, 1724, 3210, 8693, 255, 8044, 932, 6415, 7073, 3644, 6662, 6766, 2233, 7726, 8152, 1124, 5218, 5532, 804, 4539, 1968, 544, 15, 1583, 8109, 9584, 9921, 968, 1271, 9611, 879, 6556, 8726, 8423, 9235, 5068, 2655, 8015, 3971, 8932, 6375, 2515, 5443, 3012, 2799, 9036, 3542, 3880, 3239, 9450, 8882, 5655, 1378, 3107, 7759, 1602, 3336, 1735, 7388, 7678, 887, 2108, 6377, 4131, 5721, 2751, 7795, 7915, 3653, 2323, 4230, 4789, 6259, 312, 3025, 3264, 9201, 1380, 5240, 2882, 2401, 3449, 2735, 8568, 8673, 1820, 6294, 9165, 438, 3600, 5591, 6800, 8132, 9410, 8163, 8426, 8499, 2261, 5945, 9452, 5649, 9149, 426, 5780, 3437, 998, 8714, 1570, 9804, 5421, 9893, 8696, 2146, 4546, 4257, 7535, 758, 5311, 8235, 2345, 3101, 6255, 5685, 2800, 2600, 104, 8073, 4455, 1776, 1015, 14, 9422, 6321, 9141, 4965, 5746, 4602, 351, 8368, 2109, 8081, 1349, 4414, 6141, 4864, 5919, 4973, 5398, 1431, 8434, 5651, 9648, 7680, 3724, 8547, 5814, 2113, 7596, 6860, 6971, 7725, 5166, 9388, 5827, 4177, 3348, 7185, 156, 5540, 8530, 7516, 170, 3220, 7586, 1389, 5597, 3168, 4519, 4088, 1390, 874, 2163, 5841, 951, 8447, 9568, 9845, 4590, 483, 7037, 4408, 747, 5043, 9380, 1923, 9194, 5215, 9967, 9519, 8190, 6722, 8991, 6171, 8592, 8392, 748, 7522, 3622, 5856, 7880, 6724, 261, 1878, 8542, 2561, 9334, 8539, 9209, 6979, 4854, 1301, 1897, 9493, 2311, 917, 1088, 1964, 2366, 277, 8554, 5638, 2592, 7140, 645, 7976, 3196, 375, 7030, 9478, 7964, 6247, 9134, 5452, 8565, 7321, 1550, 6497, 6728, 4036, 3850, 7459, 6293, 8925, 1975, 5116, 3110, 2206, 903, 3693, 3121, 4947, 2431, 9433, 1442, 2256, 3743, 3165, 5275, 3764, 4962, 9666, 2433, 966, 8403, 5676, 2304, 5953, 1139, 1826, 4863, 5348, 8445, 6198, 9682, 5030, 7062, 7267, 5687, 8658, 4517, 673, 2482, 4385, 3739, 2215, 9047, 7446, 224, 6807, 3747, 4003, 4607, 6444, 7315, 89, 5994, 1772, 9971, 3272, 3447, 8387, 3820, 5147, 6209, 7706, 1954, 4096, 3962, 406, 7305, 5401, 4634, 395, 6958, 2716, 7153, 7294, 1529, 6215, 8908, 707, 8274, 5541, 6565, 257, 6646, 5313, 3159, 6228, 20, 5091, 9214, 5407, 460, 5539, 1140, 7854, 7284, 6249, 4834, 8041, 7454, 5480, 5219, 4594, 9589, 8383, 9507, 8339, 8833, 2577, 4074, 2757, 6859, 1922, 3183, 8486, 1877, 6083, 916, 4247, 2785, 1063, 8141, 8292, 7973, 8885, 1175, 8288, 2380, 4705, 9427, 9366, 6822, 6012, 291, 4323, 4828, 2035, 821, 6536, 4516, 418, 8514, 7526, 7345, 2182, 5222, 7006, 7200, 9155};
        Long expected = 642788503746L;
        // When
        Long actual = compoundSumFromSubArrays.solveWithLong(test);
        // Then
        assertEquals(expected, actual, .0001);
    }

}